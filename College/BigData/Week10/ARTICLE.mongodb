// ARTICLE  DATABASE //

/* DATABASE SETUP */
// 현재 db변수에 할당된 MongoDB의 데이터베이스 이름 보기
show dbs

// 사용할 데이터베이스 선택
use aritcledb


/* INSERT CLAUSES */
// aritcledb에 document를 추가
db.articles.drop() 
db.articles.insert([ 
{ "title": "article01", "content": "content01", "writer": "Velopert", "likes": 0, "comments": [] },
{ "title": "article02", "content": "content02", "writer": "Alpha", "likes": 23, "comments": [{ "name": "Bravo", "message": "Hey Man!" }]},
{ "title": "article03", "content": "content03", "writer": "Bravo", "likes": 40, "comments": [{ "name": "Charlie", "message": "Hey Man!" }, { "name": "Delta", "message": "Hey Man!" }]}])


/* FIND CLAUSES */
// articles의 모든 document를 검색
db.articles.find().pretty()

// articles의 "writer"가 "Bravo"인 document를 검색
db.articles.find({ "writer" : "Bravo" }).pretty()

// articles의 모든 document를 조회할 때, title과 content field만을 출력
db.articles.find( {}, { _id : false, "title" : true, "content" : true } )


/* COMPARISON OPERATORS */
// articles의 document 중, "likes" field의 값이 10보다 크고 30보다 작은 document를 조회
db.articles.find( { "likes" : { $gt : 10, $lt : 30 } } ).pretty()


/* SET OPERATORS */
// articles의 document 중, "writer" field의 값이 배열 ["Alpha", "Bravo"] 에 속하는 값인 document를 조회
db.articles.find( { "writer" : { $in : ["Alpha", "Bravo"] } } ).pretty()


/* LOGICAL OPERATORS */
// articles의 "title"의 값이 "article01" 이거나 "writer"의 값이 "Alpha" 인 document를 조회
db.articles.find( { $or : [ { "title" : "article01" }, { "writer" : "Alpha" } ] } ).pretty()

// articles의 "writer"의 값이 "Alpha" 이고, "likes"의 값이 20 이상인 document를 조회
db.articles.find( { $and : [ { "writer" : "Alpha" }, { "likes" : { $gt : 20 } } ] } ).pretty()	
db.articles.find( { "writer" : "Alpha", "likes" : { $gt : 20 } } ).pretty()


/* STRING OPERATORS */
// 대소문자 구분 없이 "Alph~"나, "alph~" 등으로 시작하는 것을 모두 조회
db.articles.find( { "writer" : {$regex : /Alph?/i }}).pretty()

// articles의 "title"의 값이 정규표현식 "article0[1-2]"를 만족하는 document를 조회
db.articles.find( { "title" : /article0[1-2]/ } ).pretty()


/* WHERE OPERATORS */
// articles의 "comments" field가 비어 있는 document을 조회
db.articles.find( { $where : "this.comments.length === 0" } ).pretty()


/* ELEMMATCH OPERATORS */
// articles의 document 중 "Charlie"가 작성한 댓글이 있는 document를 조회하는 방법
db.articles.find( { "comments" : { $elemMatch : { name : "Charlie" } } } ).pretty() 


/* SLICE OPERATORS */
// articles의 “title” 이 "article03" 인 document의 댓글을 1개만 보이도록 query
db.articles.find( { "title" : "article03" }, { "comments" : { $slice : 1 } } ).pretty()

// articles 안의 "comments" field의 모든 embed document를 죄회
db.articles.find(
  {
    "comments": { $elemMatch: { "name": "Charlie" } }  
  },
  {
    "title": true,
    "comments.name": true,
    "comments.message": true
  } 
).pretty() 

// projection_option의 "comments" field에 $elemMatch을 적용하여, "writer" field의 값이 "Charile"인 embed document만을 출력
db.articles.find(
  {
    "comments": { $elemMatch: { "name": "Charlie" } }
  },
  {
    "title": true,
    "comments": { $elemMatch: { "name": "Charlie" } },
    "comments.name": true,
    "comments.message": true
  } 
).pretty()

